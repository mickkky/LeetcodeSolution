# 给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。
'''
input:
    3
   / \
  9  20
    /  \
   15   7
output：
[
  [3],
  [9,20],
  [15,7]
]
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return []
        lst = []
        nodeList = [root]
        while nodeList:
            res =[]
            nextQueue=[]
            # node = nodeList.pop(0)
            
            
            for point in nodeList:     #这里再遍历每一层
                res.append(point.val)
                if point.left:
                    nextQueue.append(point.left)
                if point.right:
                    nextQueue.append(point.right)

            # if node.left:
            #     nextQueue.append(node.left)
            #     res.append(node.left.val)
            # if node.right:
            #     nextQueue.append(node.right)
            #     res.append(node.right.val)
            if res !=[]:
                lst.append(res)
                
            nodeList=nextQueue    
                
            
        return lst
        
